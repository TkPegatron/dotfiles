# : << EOF
# (‑●‑●)> dual licensed under the WTFPL v2 license and the MIT license,
#         without any warranty.

# --[ general ]-------------------------------------------------------------------

set -g default-terminal "screen-256color"
if 'infocmp -x tmux-256color > /dev/null 2>&1' 'set -g default-terminal "xterm-256color"'

set -g prefix2 C-a                        # GNU-Screen compatible prefix
bind C-a send-prefix -2

setw -g xterm-keys on
set -s escape-time 10                     # faster command sequences
set -sg repeat-time 600                   # increase repeat timeout
set -s focus-events on

set -q -g status-utf8 on                  # expect UTF-8 (tmux < 2.2)
setw -q -g utf8 on

set -g history-limit 100000               # larger history

# --[ display ]-------------------------------------------------------------------

set -g base-index 1           # start windows numbering at 1
setw -g pane-base-index 1     # make pane numbering consistent with windows

setw -g automatic-rename on   # rename window to reflect current program
set -g renumber-windows on    # renumber windows when a window is closed

setw -g aggressive-resize on  # resize window to client per-window

set -g set-titles on          # set terminal title

set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time

set -g status-interval 10     # redraw status line every 10 seconds

bind -n C-l send-keys C-l     # Clear screen

# activity
set -g monitor-activity on
set -g visual-activity off

# --[ navigation ]----------------------------------------------------------------

# toggle mouse
bind m run "cut -c3- ~/.tmux.conf | sh -s _toggle_mouse"

# split current window horizontally
## bind - split-window -v
bind - run-shell 'cut -c3- ~/.tmux.conf | sh -s _split_window -v'

# split current window vertically
## bind _ split-window -h
bind _ run-shell 'cut -c3- ~/.tmux.conf | sh -s _split_window -h'

# pane navigation
bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one

# maximize current pane
bind + run 'cut -c3- ~/.tmux.conf | sh -s _maximize_pane "#{session_name}" #D'

# window navigation
bind Tab last-window        # move to last active window

# --[ copy mode ]-----------------------------------------------------------------

set -g @yank_action 'copy-pipe-no-clear'
bind Enter copy-mode # enter copy mode

# Double clicking celects the word
bind -T copy-mode    DoubleClick1Pane select-pane \; send -X select-word \; send -X copy-pipe-no-clear "xsel -i"
bind -T copy-mode-vi DoubleClick1Pane select-pane \; send -X select-word \; send -X copy-pipe-no-clear "xsel -i"
bind -n DoubleClick1Pane select-pane \; copy-mode -M \; send -X select-word \; send -X copy-pipe-no-clear "xsel -i"

# Triple clicking selects the whole line
bind -T copy-mode    TripleClick1Pane select-pane \; send -X select-line \; send -X copy-pipe-no-clear "xsel -i"
bind -T copy-mode-vi TripleClick1Pane select-pane \; send -X select-line \; send -X copy-pipe-no-clear "xsel -i"
bind -n TripleClick1Pane select-pane \; copy-mode -M \; send -X select-line \; send -X copy-pipe-no-clear "xsel -i"

# Middle click pastes from primary selection
bind -n MouseDown2Pane run "tmux set-buffer -b primary_selection \"$(xsel -o)\"; tmux paste-buffer -b primary_selection; tmux delete-buffer -b primary_selection"

# Ctrl+c copies to clipboard
bind -T copy-mode    C-c send -X copy-pipe-no-clear "xsel -i --clipboard"
bind -T copy-mode-vi C-c send -X copy-pipe-no-clear "xsel -i --clipboard"

# --[ 8< ]------------------------------------------------------------------------

run 'cut -c3- ~/.tmux.conf | sh -s _apply_configuration'

run-shell ~/.config/tmux/plugins/tmux-yank/yank.tmux

# EOF
#
# # exit the script if any statement returns a non-true return value
# set -e
#
# unset GREP_OPTIONS
# export LC_NUMERIC=C
#
# if ! printf '' | sed -E 's///' 2>/dev/null; then
#   if printf '' | sed -r 's///' 2>/dev/null; then
#     sed () {
#       n=$#; while [ "$n" -gt 0 ]; do arg=$1; shift; case $arg in -E*) arg=-r${arg#-E};; esac; set -- "$@" "$arg"; n=$(( n - 1 )); done
#       command sed "$@"
#     }
#   fi
# fi
#
#
# _uname_s=$(uname -s)
#
# _tmux_version=$(tmux -V | awk '{gsub(/[^0-9.]/, "", $2); print ($2+0) * 100}')
#
# _is_enabled() {
#   [ x"$1" = x"true" ] || [ x"$1" = x"yes" ] || [ x"$1" = x"enabled" ] || [ x"$1" = x"1" ]
# }
#
# _decode_unicode_escapes() {
#   printf '%s' "$*" | perl -CS -pe 's/(\\u([0-9A-Fa-f]{1,4})|\\U([0-9A-Fa-f]{1,8}))/chr(hex($2.$3))/eg' 2>/dev/null
# }
#
# if command -v pkill > /dev/null 2>&1; then
#   _pkillf() {
#     pkill -f "$@" || true
#   }
# else
#   case "$_uname_s" in
#     *CYGWIN*)
#       _pkillf() {
#         while IFS= read -r pid; do
#           kill "$pid" || true
#         done  << EOF
# $(grep -Eao "$@" /proc/*/cmdline | xargs -0 | sed -E -n 's,/proc/([0-9]+)/.+$,\1,pg')
# EOF
#       }
#       ;;
#     *)
#       _pkillf() {
#         while IFS= read -r pid; do
#           kill "$pid" || true
#         done  << EOF
# $(ps -x -o pid= -o command= | grep -E "$@" | cut -d' ' -f1)
# EOF
#       }
#       ;;
#   esac
# fi
#
# _maximize_pane() {
#   current_session=${1:-$(tmux display -p '#{session_name}')}
#   current_pane=${2:-$(tmux display -p '#{pane_id}')}
#
#   dead_panes=$(tmux list-panes -s -t "$current_session" -F '#{pane_dead} #{pane_id} #{pane_start_command}' | grep -E -o '^1 %.+maximized.+$' || true)
#   restore=$(printf "%s" "$dead_panes" | sed -n -E -e "s/^1 $current_pane .+maximized.+'(%[0-9]+)'\"?$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t $current_pane/p"\
#                                            -e "s/^1 (%[0-9]+) .+maximized.+'$current_pane'\"?$/tmux swap-pane -s \1 -t $current_pane \; kill-pane -t \1/p")
#
#   if [ -z "$restore" ]; then
#     [ "$(tmux list-panes -t "$current_session:" | wc -l | sed 's/^ *//g')" -eq 1 ] && tmux display "Can't maximize with only one pane" && return
#     current_pane_height=$(tmux display -t "$current_pane" -p "#{pane_height}")
#     info=$(tmux new-window -t "$current_session:" -F "#{session_name}:#{window_index}.#{pane_id}" -P "maximized... 2>/dev/null & tmux setw -t \"$current_session:\" remain-on-exit on; printf \"\\033[\$(tput lines);0fPane has been maximized, press <prefix>+ to restore\n\" '$current_pane'")
#     session_window=${info%.*}
#     new_pane=${info#*.}
#
#     retry=1000
#     while [ x"$(tmux list-panes -t "$session_window" -F '#{session_name}:#{window_index}.#{pane_id} #{pane_dead}' 2>/dev/null)" != x"$info 1" ] && [ "$retry" -ne 0 ]; do
#       sleep 0.1
#       retry=$((retry - 1))
#     done
#     if [ "$retry" -eq 0 ]; then
#       tmux display 'Unable to maximize pane'
#     fi
#
#     tmux setw -t "$session_window" remain-on-exit off \; swap-pane -s "$current_pane" -t "$new_pane"
#   else
#     $restore || tmux kill-pane
#   fi
# }
#
# _toggle_mouse() {
#   old=$(tmux show -gv mouse)
#   new=""
#
#   if [ "$old" = "on" ]; then
#     new="off"
#   else
#     new="on"
#   fi
#
#   tmux set -g mouse $new
#   tmux display-message "mouse is now: $new"
# }
#
# _pane_info() {
#   pane_pid="$1"
#   pane_tty="${2##/dev/}"
#   ps -t "$pane_tty" -o user=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -o pid= -o ppid= -o command= | awk -v pane_pid="$pane_pid" '
#     NR > 1 && ((/ssh/ && !/-W/) || !/ssh/) {
#       user[$2] = $1; parent[$2] = $3; child[$3] = $2; pid=$2; $1 = $2 = $3 = ""; command[pid] = substr($0,4)
#     }
#     END {
#       pid = pane_pid
#       while (child[pid])
#         pid = child[pid]
#       print pid":"user[pid]":"command[pid]
#     }'
# }
#
# _split_window() {
#   pane_pid=$(tmux display -p '#{pane_pid}')
#   pane_tty=$(tmux display -p '#{b:pane_tty}')
#   split_axis=${1:-"-v"}
#
#   pane_info=$(_pane_info "$pane_pid" "$pane_tty")
#   command=${pane_info#*:}
#   command=${command#*:}
#
#   case "$command" in
#     *mosh-client*)
#       # shellcheck disable=SC2046
#        tmux split-window "$split_axis" mosh $(echo "$command" | sed -E -e 's/.*mosh-client -# (.*)\|.*$/\1/')
#      ;;
#     *ssh*)
#       # shellcheck disable=SC2046
#       tmux split-window "$split_axis" $(echo "$command" | sed -e 's/;/\\;/g')
#       ;;
#     *)
#       tmux split-window "$split_axis"
#   esac
# }
#
# "$@"
